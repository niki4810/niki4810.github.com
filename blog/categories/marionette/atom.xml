<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Marionette | Octoblog]]></title>
  <link href="http://niki4810.github.com/blog/categories/marionette/atom.xml" rel="self"/>
  <link href="http://niki4810.github.com/"/>
  <updated>2014-12-13T22:18:15-08:00</updated>
  <id>http://niki4810.github.com/</id>
  <author>
    <name><![CDATA[Nikhilesh Katakam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building Modular apps using Backbone and Geppetto]]></title>
    <link href="http://niki4810.github.com/blog/2013/05/26/building-modular-apps-using-backbone-and-geppetto/"/>
    <updated>2013-05-26T11:06:00-07:00</updated>
    <id>http://niki4810.github.com/blog/2013/05/26/building-modular-apps-using-backbone-and-geppetto</id>
    <content type="html"><![CDATA[<p>When building large multi-modular apps, embedding business logic within your Backbone views or models does not scale well.  Ideally you would want to de-couple your business logic from the view logic. Solving this problem becomes really easy using <code>Geppetto</code>.<!-- more --></p>

<h1>Prerequisites</h1>

<p>To better understand the example in this blog post, it is important to have a good knowledge on the following frameworks:</p>

<ul>
<li>Backbone &amp; Marionette</li>
<li>Backbone ModelBinder

<ul>
<li>Please refer to my previous <a href="http://niki4810.github.io/blog/2013/03/02/new-post/">post</a> on Backbone ModelBinder</li>
</ul>
</li>
<li>RequireJS

<ul>
<li><code>Cary Landholt</code> has a really good <a href="http://www.youtube.com/watch?v=VGlDR1QiV3A">screen cast</a> on requireJs</li>
</ul>
</li>
</ul>


<h1>Experience the application first</h1>

<p>We will be building a simple movie search app. We make use of the <a href="http://developer.rottentomatoes.com/">rotten tomatoes developer api</a> for fetching the movie details.
Here is the direct link to the application: <a href="http://niki4810.github.io/annotate-sources/Communicating-Via-Geppetto/index.html?">link</a></p>

<h1>Some more information on the application</h1>

<p>The application we are building is a simple search page with <code>three</code> views. A <code>search view</code> on the left for searching a movie, a <code>result view</code> on the right for displaying the search result and a <code>container view</code> which holds the search and the result views.</p>

<h1>What functionality does each view provide?</h1>

<p>Lets list out the functionality that each view is expected to provide.</p>

<ul>
<li><p>Search View</p>

<ul>
<li>Should accept the movie title as users input.</li>
<li>Should  shout out the movie title using an event when the search button is clicked.</li>
</ul>
</li>
<li><p>Result View</p>

<ul>
<li>Should keep listening for data.</li>
<li>Display the data to the user whenever it gets it.</li>
</ul>
</li>
<li><p>Container View</p>

<ul>
<li>Acts as a dumb container that holds the search and the result view.</li>
</ul>
</li>
</ul>


<h1>Lets create the view's first</h1>

<p>Here are the code snippets for each view</p>

<h3>Search View</h3>

<p>```javascript
//search view
define(</p>

<pre><code>[
"jquery",
"underscore", 
"backbone", 
"marionette",
"geppetto",
"text!src/templates/SearchViewTemplate.html"
],function(
    $,
    _,
    Backbone,
    Marionette,
    Geppetto,
    SearchViewTemplate
){


var SearchView = Marionette.ItemView.extend({
    template : SearchViewTemplate,
    className : "well span4",
    bindings : {
            "title" : '[name = "title"]'
    },
    events : {
        "click button.searchBtn" : "searchClicked"
    },
    searchClicked : function(e) {
        if(this.model.get("title")){
        this.context.dispatch("performSearchEvent"/*event name*/,{data:this.model}/*event payload*/);
        }else{
            //if title is not set, shake the text input
            //should have a required validator, but this would work
            this.$('[name = "title"]').removeClass().addClass('animated shake');
            var that = this;
            var wait = window.setTimeout(function() {
                that.$('[name = "title"]').removeClass()
            }, 1300); 

        }
    },
    //local variable for model binder
    _modelBinder : undefined,
    initialize : function() {
         _.bindAll(this);
        //on view initialize, initialize _modelBinder
        this._modelBinder = new Backbone.ModelBinder();
        //save the passed in context locally  such that
        // we can dispatch or listen to events on this context
        this.context = this.options.context;
    },
    close : function() {
        //when view closes, unbind Model bindings
        this._modelBinder.unbind();
    },
    onRender : function() {           
        this._modelBinder.bind(this.model/*the model to bind*/, 
                               this.el/*root element*/, 
                               this.bindings /*bindings*/ );

    }
});

return SearchView;
</code></pre>

<p>})</p>

<p>```</p>

<h3>Result View</h3>

<p>```javascript
//result view
define([</p>

<pre><code>"jquery", 
"underscore", 
"backbone", 
"marionette",
"geppetto", 
"text!src/templates/ResultViewTemplate.html"
],
</code></pre>

<p> function(</p>

<pre><code>$, 
_, 
Backbone, 
Marionette,
Geppetto, 
ResultViewTemplate) {
var ResultView = Marionette.ItemView.extend({
    template: ResultViewTemplate,
    className : "well span6 clearfix",
    bindings : {
            "title" : '[name = "title"]',
            "year" : '[name = "year"]',
            "rated" : '[name = "rated"]',
            "rating" :'[name ="rating"]',
            "poster" :{selector: '[name=poster]',  elAttribute: 'src'}
    },
    initialize : function() {
          _.bindAll(this);
            //on view initialize, initialize _modelBinder
        this._modelBinder = new Backbone.ModelBinder();
        //save the passed in context locally  such that
        // we can dispatch or listen to events on this context
        this.context = this.options.context;
        this.context.listen(this, "loadResultsSuccessEvent"/*event name*/, 
                            this.handleSearchResultsLoaded/*event listener*/);
        this.context.listen(this, "loadResultsErrorEvent"/*event name*/, 
                            this.handleSearchResultsLoadError/*event listener*/);
    },      
    close : function() {
        //when view closes, unbind Model bindings
        this._modelBinder.unbind();
    },
    onRender : function() {

        this._modelBinder.bind(this.model/*the model to bind*/, 
                               this.el/*root element*/, 
                               this.bindings /*bindings*/ );


    },
    handleSearchResultsLoaded : function(data){
        this.model.clear();
        this.model.set(data);
    },
    handleSearchResultsLoadError : function(){
        this.model.clear();
        alert('Opps...something went wrong, try searching again');
    }
});

return ResultView;
</code></pre>

<p>})</p>

<p>```</p>

<h3>Container View</h3>

<p>```javascript
//container view
define([</p>

<pre><code>"jquery",
"underscore", 
"backbone", 
"marionette",
"geppetto", 
"src/controller/ApplicationContext", 
"text!src/templates/ContainerTemplate.html", 
"src/views/SearchView", 
"src/views/ResultView"],
function(
    $, 
    _, 
    Backbone, 
    Marionette,
    Geppetto, 
    ApplicationContext, 
    ContainerTemplate,
    SearchView, 
    ResultView) {

//container view acts as plain layout view
var ContainerView = Marionette.ItemView.extend({
    //set template
    template : ContainerTemplate,
    className : "container myContainer",
    initialize : function() {
         _.bindAll(this);
        //create a Geppetto context
        Geppetto.bindContext({
            view : this,
            context : ApplicationContext
        });
    },
    onRender : function() {
        //when view is container view is rendered
        //construct the search view
        this.constructSearchView();
        //construct the result view
        this.constructResultView();
    },
    constructSearchView : function() {
        //instantiate an search view
        //notice that we are passig the context from the
        //current container view to the search view constructor
        var mySearchView = new SearchView({
            context : this.context,
            model : new Backbone.Model()
        });
        //render the view
        mySearchView.render();
        //append it the current container
    this.$el.append(mySearchView.$el);

    },
    constructResultView : function() {
        //instantiate an result view
        //notice that we are passig the context from the
        //current container view to the result view constructor
        var myResultView = new ResultView({
            context : this.context,
            model : new Backbone.Model()
        });
        //render the view
        myResultView.render()
        //append it the current container
        this.$el.append(myResultView.$el);


    }
});
return ContainerView;
</code></pre>

<p>});
```</p>

<h1>So, who is actually fetching the data ?</h1>

<p>By looking at the code above, none of the views hold the business logic to fetch the data from the serve. The <code>search view</code> simply dispatches a <code>performSearchEvent</code> with the movie title as payload. The <code>result view</code> keeps listening for <code>loadResultsSuccessEvent</code> or <code>loadResultsErrorEvent</code> for displaying the data or error message &amp; the <code>container view</code> simply creates these two views.</p>

<p>So who is actually querying the server ? Well, with <code>Geppetto</code>, you could define commands that lets you handle all the complex business logic.</p>

<p>The code snippet below shows the command for our example. The commands have an <code>execute</code> function which gets called when an event tied to the command is triggered.</p>

<p>```javascript
//Search Movies Command
define(["jquery", "underscore"], function($, _) {</p>

<pre><code>var command = function() {
};

command.prototype.execute = function() {
    _.bindAll(this);
    var that = this;

    var apikey = "78ejsdd76tc6jsffmrxjddxu";
    var baseUrl = "http://api.rottentomatoes.com/api/public/v1.0";
    var moviesSearchUrl = baseUrl + '/movies.json?apikey=' + apikey;
    //get the movie title
    var query = this.eventData.data.get("title");
    var pageLimit = "&amp;page_limit=1";

    //make an plain jquery ajax call to fetch the movie details using the
    //rotten tomatoes public api's

    $.ajax({
        url : moviesSearchUrl + '&amp;q=' + encodeURI(query) + pageLimit,
        dataType : "jsonp",
        success : function(data) {
            that.handleDataLoadSuccess(data);
        },
        statusCode : {
            503 : function() {
                that.handleDataLoadError("page not found");
            }
        },
        error : function(jqXHR, textStatus, errorThrown) {
            that.handleDataLoadError(errorThrown);
        }
    });

};

command.prototype.handleDataLoadSuccess = function(data) {
    var movies = data.movies;

    if (!data || !data.movies || data.movies.length &lt;= 0) {
        //when there are no movies dispatch an error event
        this.context.dispatch("loadResultsErrorEvent"/*event name*/);
    } else {
        //when we get the movies results
        //construct an object with movie details
        var resultObj = {};
        resultObj.rated = movies[0].mpaa_rating;
        resultObj.title = movies[0].title;
        resultObj.rating = movies[0].ratings.audience_score;
        resultObj.year = movies[0].year;
        resultObj.poster = movies[0].posters.original;
        //dispatch an event on the context with movie details as payload
        this.context.dispatch("loadResultsSuccessEvent"/*event name*/, resultObj);
    }

};

command.prototype.handleDataLoadError = function(e) {
    //when there are no movies dispatch an error event
    this.context.dispatch("loadResultsErrorEvent"/*event name*/);
};

return command;
</code></pre>

<p>})</p>

<p>```</p>

<h1>How does this command get called?</h1>

<p><code>Geppetto</code> controller/context facilitate's the mappings between events and command. In our case whenever a <code>performSearchEvent</code> is dispatch the context/controller maps it to the <code>SearchMoviesCommand</code> and supplies the <code>eventData</code> as payload to the command.</p>

<p>```javascript
//application context or controller
define([</p>

<pre><code>'backbone', 
'geppetto',
'src/commands/SearchMoviesCommand'], 
</code></pre>

<p>function(</p>

<pre><code>Backbone,
Geppetto, 
SearchMoviesCommand) {

//return a geppetto context
return Geppetto.Context.extend({
    //setup an initialize function
    initialize : function() {
        // map commands 
        //when ever a "performSearchEvent" is dispatch on this command
        //the context delegates that call to the SearchMoviesCommand
        this.mapCommand( "performSearchEvent"/*event name*/, SearchMoviesCommand );
    }
});
</code></pre>

<p>})</p>

<p>```</p>

<p>If we look at the initialize function in container view, we create a context using the bindContext function.</p>

<p>```javascript
...
Geppetto.bindContext({</p>

<pre><code>view : this,
context : ApplicationContext
</code></pre>

<p>});
...
```</p>

<p>We then pass this context into search and result view constructors. Using context, communicating between view becomes really easy. Each view that shares a common context can dispatch and listen to events on the context.</p>

<h1>So what's the benefit of Geppetto</h1>

<p>By now, its should be clear as to what advantage Geppetto brings to your Backbone apps. Here is a list of them:</p>

<ul>
<li>Currently we use the rotten tomatoes api's for searching movies. If we want to use a different service provider, all we need to do is modify the logic in the command. Our views remain untouched</li>
<li>The same logic goes for the views as well, if we want to change the view layout, the business logic remains untouched.</li>
<li>Since there is a clear separation of concern and de-coupling between our views and command, writing test cases would be really easy.</li>
</ul>


<h1>Where can I find the complete source code for this example?</h1>

<p>The complete source code for this example can be found at the following repo <a href="https://github.com/niki4810/Developing-Modular-Apps-With-Geppetto">link</a></p>

<p>Here is a direct link for the <a href="https://github.com/niki4810/Developing-Modular-Apps-With-Geppetto/archive/master.zip">zip file</a></p>

<h1>Credits</h1>

<ul>
<li><a href="http://modeln.github.io/backbone.geppetto/">Geppetto's</a> project page has detailed documentation on all of its features, please refer to it for further details.</li>
<li>Special thanks to <a href="https://github.com/geekdave">David Cadwallader</a> for building such a elegant framework.</li>
<li>The example make uses of the <a href="http://developer.rottentomatoes.com/">rotten tomatoes developer api</a> for fetching the movie details.</li>
</ul>

]]></content>
  </entry>
  
</feed>
